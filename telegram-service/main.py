# telegram-service/main.py
from fastapi import FastAPI
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import asyncio
import os
import logging
from handlers import start_command, handle_group_input  # –£–±–∏—Ä–∞–µ–º status_command

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()
bot_application = None

@app.on_event("startup")
async def startup():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞"""
    global bot_application
    
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not set!")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
        bot_application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        bot_application.add_handler(CommandHandler("start", start_command))
        bot_application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_group_input))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        await bot_application.initialize()
        await bot_application.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(run_polling())
        
        logger.info("‚úÖ Telegram bot started successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Error starting bot: {e}")

async def run_polling():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞"""
    try:
        logger.info("üîÑ Starting polling...")
        await bot_application.updater.start_polling()
        logger.info("‚úÖ Polling started successfully!")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(1)
            
    except Exception as e:
        logger.error(f"‚ùå Polling error: {e}")

@app.on_event("shutdown")
async def shutdown():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    if bot_application:
        await bot_application.stop()
        await bot_application.shutdown()

@app.get("/health")
async def health():
    return {"status": "healthy", "bot_running": bot_application is not None}